"""Core Pydantic models shared across newsletter pipeline stages."""

from __future__ import annotations

from enum import Enum
from typing import Any

from pydantic import AnyHttpUrl, BaseModel, Field


class PrimaryTopic(str, Enum):
    """Supported top-level content topics."""

    PAPERS = "Paper"
    BLOGS = "Blog"
    OPEN_SOURCE = "Open Source"
    ENGINEERING_PRODUCT_BUSINESS = "Engineering & Product & Business"
    UNKNOWN = "Unknown"


class UrlEntry(BaseModel):
    """Validated input URL with normalization metadata."""

    raw_url: str = Field(..., description="Original URL string as found in the input file.")
    normalized_url: AnyHttpUrl = Field(..., description="Normalized URL used for deduplication.")
    source_line: int = Field(..., ge=1, description="Line number in the source file.")


class InvalidUrlEntry(BaseModel):
    """Represents an input URL that failed validation."""

    raw_url: str
    reason: str
    source_line: int


class UrlLoadResult(BaseModel):
    """Outcome of loading the URL manifest."""

    entries: list[UrlEntry] = Field(default_factory=list)
    invalid_entries: list[InvalidUrlEntry] = Field(default_factory=list)
    duplicate_urls: list[AnyHttpUrl] = Field(default_factory=list)

    @property
    def valid_count(self) -> int:
        return len(self.entries)

    @property
    def invalid_count(self) -> int:
        return len(self.invalid_entries)


class ArticleContent(BaseModel):
    """Structured article content as returned by the retriever."""

    url: AnyHttpUrl
    title: str | None = None
    text: str = Field(..., description="Extracted plain text body.")
    summary: str | None = Field(default=None, description="Optional short summary if available.")
    raw_payload: dict[str, Any] = Field(
        default_factory=dict, description="Original API payload for debugging."
    )


class ClassifiedArticle(BaseModel):
    """Article paired with its primary topic classification."""

    content: ArticleContent
    topic: PrimaryTopic
    classification_source: str = Field(
        ..., description="Notes whether topic came from rules or LLM."
    )


class MetadataRecord(BaseModel):
    """Metadata generated by the LLM for newsletter entries."""

    topic: PrimaryTopic
    title: str
    authors: list[str]
    organizations: list[str]
    recommendation: str
    subtopics: list[str] = Field(default_factory=list)
    repositories: list[str] = Field(default_factory=list)
    datasets: list[str] = Field(default_factory=list)
    attachments: list[str] = Field(default_factory=list)
    missing_optional_fields: list[str] = Field(default_factory=list)


class NewsletterEntry(BaseModel):
    """Final structured entry used for Markdown rendering."""

    source_url: AnyHttpUrl
    metadata: MetadataRecord
    topic: PrimaryTopic
    subtopics: list[str] = Field(default_factory=list)

    @property
    def primary_subtopic(self) -> str | None:
        return self.subtopics[0] if self.subtopics else None


class PipelineResult(BaseModel):
    """Aggregated output from the end-to-end pipeline run."""

    entries: list[NewsletterEntry] = Field(default_factory=list)
    invalid_urls: list[InvalidUrlEntry] = Field(default_factory=list)
    skipped_urls: list[str] = Field(default_factory=list)
    failed_urls: list[str] = Field(default_factory=list)

    @property
    def success_count(self) -> int:
        return len(self.entries)
